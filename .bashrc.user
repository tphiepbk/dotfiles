#!/bin/bash

########################################################################
# AUTHOR: Hiep Phuc Thai                                               #
# It takes me 2 years to finish this shiet, but it's worth every penny #
# It's not just about the implementation, it's about the idea also     #
########################################################################

# RULES
# - Use the keyword "function" before function
# - Use the underline "_" before function name to hide it from bash completion

# ========================================================== DEFAULT EXPORT =====================================================================

export TERM="xterm-256color"
export LESS="-XRi"
export EDITOR="/usr/bin/vim"

# tmux tmp dir
export TMUX_TMPDIR="$HOME/.tmux"

# cdialab
if [[ ! "$PATH" == *"$HOME/.cdialab"* ]]; then
    export PATH="$HOME/.cdialab:$PATH"
fi

# my common scripts
if [[ ! "$PATH" == *"$HOME/.scripts"* ]]; then
    export PATH="$HOME/.scripts:$PATH"
fi

# nodejs
export NVM_DIR="$HOME/.nvm"
# shellcheck source=/dev/null
[ -s "$NVM_DIR/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh"  # This loads nvm
# shellcheck source=/dev/null
[ -s "$NVM_DIR/bash_completion" ] && \. "${NVM_DIR}/bash_completion"  # This loads nvm bash_completion

# ========================================================== EXTERNAL TOOLS =====================================================================

if [[ ! "$PATH" == *"$HOME/.prebuilt/bin"* ]]; then
    export PATH="$HOME/.prebuilt/bin:$PATH"
fi

# ========================================================== DEFAULT OPTIONS =====================================================================

_EZA_OPTS=("--long" "--classify=always" "--color=always" "--icons=always" \
            "--all" "--all" \
            "--binary" "--group" "--header" "--mounts" "--modified" "--time-style=+%a %d-%m-%Y %H:%M:%S" "--octal-permissions")

_BAT_OPTS=("--color=always")

_FZF_DEFAULT_OPTS=("--reverse" "--border" "--height='70%'" "--preview-window '45%,~3'")
export FZF_DEFAULT_OPTS="${_FZF_DEFAULT_OPTS[*]}"

_FZF_FOLDER_OPTS=("--preview" "eza ${_EZA_OPTS[*]} {}")

_FZF_FILE_OPTS=("--multi" "--preview" "bat ${_BAT_OPTS[*]} {}")

# ========================================================== PROMPT UTILITIES =====================================================================

# PROMPT CUSTOMIZATION
PROMPT_COMMAND=_prompt_command

# Global Variables
# For these variables, we can use $COLUMNS and $LINE instead,
# but I want to use tput :D
TERM_NUM_OF_COLUMNS=
TERM_NUM_OF_LINES=

DIRECTORY_HISTORY_FILE="$HOME/.directory_history"
MAX_LINE_DIRECTORY_HISTORY=100

# Utility to store the current visited directory
# If directory is already exists, we will not save it
function _store_current_directory () {
    if [[ ! -e "${DIRECTORY_HISTORY_FILE}" ]]; then
        touch "${DIRECTORY_HISTORY_FILE}"
    fi
    local current_dir
    current_dir="$(pwd)"
    if ! grep -q "${current_dir}" "${DIRECTORY_HISTORY_FILE}"; then
        echo "${current_dir}" >> "${DIRECTORY_HISTORY_FILE}"
    fi
}

# Utility to removed the deleted directory which is still in the
# .directory_history file
function _remove_non_existent_directory() {
    while IFS= read -r dir; do
        if [[ ! -d $dir ]]; then
            # Use "|" instead because "/" will appear in the the "dir" variable
            # Could not use "/<text to delete>/d" also
            sed -i "s|$dir||" "${DIRECTORY_HISTORY_FILE}"
        fi
    done <<< "$(cat "${DIRECTORY_HISTORY_FILE}")"
    # Remove blank line
    sed -i '/^$/d' "${DIRECTORY_HISTORY_FILE}"
}

# Utility to clear the .directory_history file if it's too long
function _clear_directory_history() {
    local number_of_line
    number_of_line=$(wc -l "${DIRECTORY_HISTORY_FILE}" | cut -d" " -f1)
    if [[ "${number_of_line}" -gt "${MAX_LINE_DIRECTORY_HISTORY}" ]]; then
        echo "" > "${DIRECTORY_HISTORY_FILE}"
    fi
}

function _prompt_command () {
    local EXIT="$?"
    TERM_NUM_OF_COLUMNS=$(tput cols)
    TERM_NUM_OF_LINES=$(tput lines)

    _remove_non_existent_directory

    _clear_directory_history

    _store_current_directory

    if [[ "$TERM_NUM_OF_COLUMNS" -lt 130 ]]; then
        _generate_prompt_lite $EXIT
    else
        _generate_prompt $EXIT
    fi
}

function _parse_git_branch() {
    local git_branch
    git_branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
    if [[ -n "${git_branch}" ]]; then
        if [[ ! "${git_branch}" =~ ^\(.*\)$ ]]; then
            git_branch="(${git_branch})"
        fi
        echo "${git_branch}"
    fi
}

function _generate_prompt_lite() {
    local EXIT="$1"

    # Colors used in prompt
    local END_COLOR=
    END_COLOR=$(tput sgr0)

    local PURPLE=
    PURPLE=$(tput setaf 141)

    local VIOLET=
    VIOLET=$(tput setaf 177)

    local ORANGE=
    ORANGE=$(tput setaf 202)

    local DARKSLATEGRAY1=
    DARKSLATEGRAY1=$(tput setaf 81)

    local MAGENTA=
    MAGENTA=$(tput setaf 200)

    local RED=
    RED=$(tput setaf 196)

    local GREEN=
    GREEN=$(tput setaf 46)

    local GOLD=
    GOLD=$(tput setaf 222)

    # Special colors
    local PS_RED=
    PS_RED="\[${RED}\]"

    local PS_GREEN=
    PS_GREEN="\[${GREEN}\]"

    local PS_GOLD=
    PS_GOLD="\[${GOLD}\]"

    local PS_VIOLET=
    PS_VIOLET="\[${VIOLET}\]"

    local PS_ORANGE=
    PS_ORANGE="\[${ORANGE}\]"

    local PS_DARKSLATEGRAY1=
    PS_DARKSLATEGRAY1="\[${DARKSLATEGRAY1}\]"

    local PS_MAGENTA=
    PS_MAGENTA="\[${MAGENTA}\]"

    local PS_END_COLOR=
    PS_END_COLOR="\[${END_COLOR}\]"

    # Define icons
    # Unicode character broken after sourcing openstack_vmware.sh
    # because that file have this command :export LC_ALL="C"
    # We should unset LC_ALL after sourcing that file
    local folder_icon=
    folder_icon=$'\uf07c'
    folder_icon="${PS_ORANGE}${folder_icon}${PS_END_COLOR}"

    local git_icon=
    git_icon=$'\uf1d3'

    local jet_fighter_icon
    jet_fighter_icon=$'\uf0fb'

    local opendir_icon
    opendir_icon=$'\u27ea'
    opendir_icon="${PS_RED}${opendir_icon}${PS_END_COLOR}"

    local closedir_icon
    closedir_icon=$'\u27eb'
    closedir_icon="${PS_RED}${closedir_icon}${PS_END_COLOR}"

    # DEFINE PATTERNS

    # Username hostname part
    local current_username=
    current_username=$(whoami)
    local current_hostname=
    current_hostname=$(hostname)
    local username_hostname_part="${PS_VIOLET}${current_username}${PS_END_COLOR}${PS_RED}${jet_fighter_icon}${PS_END_COLOR} ${PS_VIOLET}${current_hostname}${PS_END_COLOR}"

    # Directory part
    local current_directory=
    current_directory=$(pwd)
    local current_directory_reduced=
    current_directory_reduced=$(pwd | rev | cut -d'/' -f1 | rev)
    local directory_part=
    directory_part="${folder_icon}  ${opendir_icon}${PS_DARKSLATEGRAY1}${current_directory_reduced}${PS_END_COLOR}${closedir_icon}"

    # Git branch part
    local current_git_branch=
    current_git_branch=$(_parse_git_branch)
    local current_git_branch_length=${#current_git_branch}
    local git_branch_part=
    if [[ $current_git_branch_length -ne 0 ]]; then
        git_branch_part="${git_icon}  ${PS_ORANGE}${current_git_branch}${PS_END_COLOR} "
    else
        git_branch_part=""
    fi

    local zero_return_code_part="${PS_GREEN}(${EXIT})${PS_END_COLOR}"
    local non_zero_return_code_part="${PS_RED}(${EXIT})${PS_END_COLOR}"

    # Indicate if user it root (#) or otherwise ($)
    local user_type_indicator="${PS_MAGENTA}\$${PS_END_COLOR}"

    # Input indicator part
    local keyboard_icon=
    keyboard_icon=$'\uf11c'
    local input_indicator="${PS_GOLD}${keyboard_icon}${PS_END_COLOR}"

    # START MAKING PROMPT
    local generated_ps1="${username_hostname_part} ${directory_part} ${git_branch_part}"

    # Left part

    if [[ "$EXIT" -eq 0 ]]; then
        generated_ps1+="${zero_return_code_part}"
    else
        generated_ps1+="${non_zero_return_code_part}"
    fi

    generated_ps1+=" ${user_type_indicator} "

    generated_ps1+="${input_indicator}  "

    echo ""
    PS1=" ${generated_ps1}"
}

function _generate_prompt() {
    local EXIT="$1"

    # Colors used in prompt
    local END_COLOR=
    END_COLOR=$(tput sgr0)

    local PURPLE=
    PURPLE=$(tput setaf 141)

    local VIOLET=
    VIOLET=$(tput setaf 177)

    local ORANGE=
    ORANGE=$(tput setaf 202)

    local MAGENTA=
    MAGENTA=$(tput setaf 200)

    local YELLOW=
    YELLOW=$(tput setaf 11)

    local DARKSLATEGRAY1=
    DARKSLATEGRAY1=$(tput setaf 123)

    local RED=
    RED=$(tput setaf 196)

    local GREEN=
    GREEN=$(tput setaf 46)

    local GOLD=
    GOLD=$(tput setaf 222)

    # Special colors
    local PS_RED=
    PS_RED="\[${RED}\]"

    local PS_GREEN=
    PS_GREEN="\[${GREEN}\]"

    local PS_GOLD=
    PS_GOLD="\[${GOLD}\]"

    local PS_END_COLOR=
    PS_END_COLOR="\[${END_COLOR}\]"

    # Define icons
    # Unicode character broken after sourcing openstack_vmware.sh
    # because that file have this command :export LC_ALL="C"
    # We should unset LC_ALL after sourcing that file
    local jet_fighter_icon
    jet_fighter_icon=$'\uf0fb'

    local calendar_icon=
    calendar_icon=$'\uf133'
    calendar_icon="${GREEN}${calendar_icon}${END_COLOR}"

    local clock_icon=
    clock_icon=$'\uf017'
    clock_icon="${GREEN}${clock_icon}${END_COLOR}"

    local folder_icon=
    folder_icon=$'\uf07c'
    folder_icon="${ORANGE}${folder_icon}${END_COLOR}"

    local git_icon=
    git_icon=$'\uf1d3'

    local check_icon
    check_icon=$'\uf058'

    local cross_icon=
    cross_icon=$'\uf057'

    local linux_penguin_icon
    linux_penguin_icon=$'\uf17c'

    local dash_icon
    dash_icon=$'\u23af'

   local internal_dot_icon
    internal_dot_icon=$'\u25ce'

    local first_line_start_icon
    first_line_start_icon=$'\u256d'

    local datetime_open_icon
    datetime_open_icon=$'\uf0d9'

    local datetime_close_icon
    datetime_close_icon=$'\uf0da'

    local opendir_icon
    opendir_icon=$'\u27ea'
    opendir_icon="${RED}${opendir_icon}${END_COLOR}"

    local closedir_icon
    closedir_icon=$'\u27eb'
    closedir_icon="${RED}${closedir_icon}${END_COLOR}"

    local space_length=1
    local icon_length=2
    local small_icon_length=1
    local punctuation_length=1

    # Define patterns
    local first_line_left_symbol="${YELLOW}${first_line_start_icon}${dash_icon}${internal_dot_icon}${END_COLOR}${ORANGE} ${linux_penguin_icon}${END_COLOR} "
    local second_line_symbol=""
    local symbol_length=6

    # Datetime icon
    local datetime_symbol_length=5
    local first_line_datetime_left_symbol="${MAGENTA}"
    local first_line_datetime_right_symbol="${MAGENTA}"
    for ((i = 0 ; i < datetime_symbol_length ; i++)); do
      first_line_datetime_left_symbol+="${datetime_open_icon}"
      first_line_datetime_right_symbol+="${datetime_close_icon}"
    done
    first_line_datetime_left_symbol+="${END_COLOR}"
    first_line_datetime_right_symbol+="${END_COLOR}"

    # Datetime part
    local current_datetime=
    current_datetime=$(date +"${calendar_icon} ${PURPLE} %d/%m/%Y${END_COLOR} ${clock_icon} ${PURPLE} %H:%M:%S${END_COLOR}")
    local datetime_part="${PURPLE}${current_datetime}${END_COLOR}"
    local datetime_part_length=${#current_datetime}
    # Modify the datetime_part_length a little bit to fit the terminal size
    datetime_part_length=$((datetime_part_length-66))

    # Username hostname part
    local current_username=
    current_username=$(whoami)
    local current_username_length=${#current_username}
    local current_hostname=
    current_hostname=$(hostname)
    local current_hostname_length=${#current_hostname}
    local username_hostname_part="${VIOLET}${current_username}${END_COLOR}${RED}${jet_fighter_icon}${END_COLOR} ${VIOLET}${current_hostname}${END_COLOR}"
    local username_hostname_part_length=$((current_username_length + icon_length + current_hostname_length))

    # Git branch part
    local current_git_branch=
    current_git_branch=$(_parse_git_branch)
    local current_git_branch_length=${#current_git_branch}
    local git_branch_part=
    local git_branch_part_length=
    if [[ $current_git_branch_length -ne 0 ]]; then
        git_branch_part="${git_icon}  ${ORANGE}${current_git_branch}${END_COLOR} "
        git_branch_part_length=$((small_icon_length + space_length * 2 + current_git_branch_length + space_length))
    else
        git_branch_part=""
        git_branch_part_length=0
    fi

    # Directory part
    local current_full_directory=
    current_full_directory=$(pwd)
    local current_full_directory_length=${#current_full_directory}
    local current_directory=
    if ((current_full_directory_length + current_git_branch_length >= TERM_NUM_OF_COLUMNS * 60 / 100)); then
      current_directory=$(pwd | rev | cut -d'/' -f1 | rev)
    else
      current_directory=${current_full_directory}
    fi

    local directory_part=
    directory_part="${folder_icon}  ${opendir_icon}${DARKSLATEGRAY1}${current_directory}${END_COLOR}${closedir_icon}"

    local current_directory_length=${#current_directory}
    local directory_part_length=$((small_icon_length + punctuation_length * 2 + space_length * 2 + current_directory_length))

    # Return code part
    local zero_return_code_part="${PS_GREEN}return ${EXIT} ${check_icon}${PS_END_COLOR}"
    local non_zero_return_code_part="${PS_RED}return ${EXIT} ${cross_icon}${PS_END_COLOR}"

    # Input indicator part
    local keyboard_icon=
    keyboard_icon=$'\uf11c'
    local play_icon=
    play_icon=$'\uf04b'
    local input_indicator=
    input_indicator="${PS_GOLD}${play_icon}${play_icon}${play_icon} ${keyboard_icon}${PS_END_COLOR}"

    # START MAKING PROMPT
    local PS1_first_line="\n"
    local PS1_second_line=""

    # Left part
    PS1_first_line_left_part="${first_line_left_symbol} "
    PS1_first_line_left_part+="${username_hostname_part} ${directory_part} ${git_branch_part}"
    PS1_first_line_left_part+="${MAGENTA}\$${END_COLOR} "
    local PS1_first_line_left_part_length=$((symbol_length + space_length + username_hostname_part_length + space_length + directory_part_length\
        + space_length + git_branch_part_length + punctuation_length + space_length))

    # Right part
    PS1_first_line_right_part=" ${first_line_datetime_left_symbol} ${datetime_part} ${first_line_datetime_right_symbol}"
    local PS1_first_line_right_part_length=$((datetime_part_length + datetime_symbol_length * 2 + space_length * 3))

    # Calculate number of available space
    local number_of_available_space=$((TERM_NUM_OF_COLUMNS-PS1_first_line_left_part_length-PS1_first_line_right_part_length))

    # Middle part
    local PS1_first_line_middle_part="${YELLOW}${internal_dot_icon}"
    ((number_of_available_space-=2))
    for ((i = 0 ; i < number_of_available_space ; i++)); do
        PS1_first_line_middle_part+="${dash_icon}"
    done
    PS1_first_line_middle_part+="${internal_dot_icon}${END_COLOR}"

    # Combination
    PS1_first_line+="${PS1_first_line_left_part}"
    PS1_first_line+="${PS1_first_line_middle_part}"
    PS1_first_line+="${PS1_first_line_right_part}"

    PS1_second_line="${second_line_symbol} "

    if [[ "$EXIT" -eq 0 ]]; then
        PS1_second_line+="${zero_return_code_part}"
    else
        PS1_second_line+="${non_zero_return_code_part}"
    fi

    PS1_second_line+="  ${input_indicator}  "

    echo -e "${PS1_first_line}"

    PS1="${PS1_second_line}"
}

# ========================================================== LISTING UTILITIES =====================================================================

# My custom list directory command
# Only use "less" when there are more than 30 directory appears
function _my_ll_command() {
    NUMBER_OF_LINE=$(find "$@" -maxdepth 1 | wc -l)

    if [[ $NUMBER_OF_LINE -gt 0 ]]; then
        echo "Number of files/folders: $NUMBER_OF_LINE"
        echo
    fi

    if ((NUMBER_OF_LINE > TERM_NUM_OF_LINES)); then
        eza "${_EZA_OPTS[@]}" "$@" | less
    else
        eza "${_EZA_OPTS[@]}" "$@"
    fi
    return $?
}

function _my_tree_command() {
    local CURRENT_DIRECTORY=
    if [[ -z "$1" ]]; then
        CURRENT_DIRECTORY="."
    else
        CURRENT_DIRECTORY="$1"
    fi

    if [[ -e "${CURRENT_DIRECTORY}" ]]; then
        NUMBER_OF_LINE=$(tre --all "${CURRENT_DIRECTORY}" | wc -l)
        if [[ "${NUMBER_OF_LINE}" -gt "$TERM_NUM_OF_LINES" ]]; then
            tre --all --color always "${CURRENT_DIRECTORY}" | less
        else
            tre --all --color always "${CURRENT_DIRECTORY}"
        fi
        return $?
    else
        echo "tre: cannot access '$1': No such file or directory"
        return 2
    fi
}

# ========================================================== FZF UTILITIES =====================================================================

function _parse_to_prompt() {
    local INPUT="${*}"
    READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${INPUT}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
    READLINE_POINT=$(( READLINE_POINT + ${#INPUT} ))
}

function _show_history_using_fzf () {
    local HISTORY_FZF_RESULTS=
    HISTORY_FZF_RESULTS="$(history | fzf-tmux -p '90%,70%' --tac --tiebreak=index | cut -d " " -f 4-)"
    _parse_to_prompt "$HISTORY_FZF_RESULTS"
}

# Mapping Ctrl-R with fzf
bind -x '"\C-r": _show_history_using_fzf';

function _call_tool_with_fzf_utility () {
    local tool="$1"
    local fzf_output
    fzf_output=$(fzf-tmux -p "90%,70%" "${_FZF_FILE_OPTS[@]}")
    local ret_code="$?"
    if [[ -n ${fzf_output} && "${ret_code}" -eq 0 ]]; then
        "$tool" "${fzf_output}"
        ret_code="$?"
    fi
    return "${ret_code}"
}

function _cd_fzf_utility () {
    local fzf_output
    local git_branch
    git_branch=$(_parse_git_branch)
    if [[ -n ${git_branch} ]]; then
        local git_root_dir
        git_root_dir=$(git root)
        fzf_output=$( (cat "${DIRECTORY_HISTORY_FILE}" && find . "${git_root_dir}" -type d -print) | fzf-tmux -p "90%,70%" "${_FZF_FOLDER_OPTS[@]}" )
    else
        fzf_output=$( (cat "${DIRECTORY_HISTORY_FILE}" && find . -type d -print) | fzf-tmux -p "90%,70%" "${_FZF_FOLDER_OPTS[@]}" )
    fi
    if [[ -n ${fzf_output} ]]; then
       cd "${fzf_output}" || return 1
    fi
}

# Utility to call tmux whenever start
function _start_tmux_utility () {
    local TMUX_INIT_SESSION="${USER}"

    local TMUX_DEFAULT_FILE="/tmp/tmux-2645/default"

    # If we are currently not in tmux, start tmux
    # if not, do nothing
    if [[ -z "$TMUX" ]]; then
        # Check if tmux file exists
        if [[ ! -e "$TMUX_DEFAULT_FILE" ]]; then
            echo "Trying restoring tmux..."
            pkill -USR1 tmux
        fi

        # Check if tmux works fine
        # or if there is not any tmux session
        if ! tmux ls; then
            echo "Something went wrong after restoring, creating new session..."
            if ! tmux new -s "$TMUX_INIT_SESSION"; then
                echo "$TMUX_INIT_SESSION already exists, entering..."
                tmux a -t "$TMUX_INIT_SESSION"
            fi
        else
            echo "Entering first session of the list"
            local first_session=
            first_session=$(tmux ls | head -n 1 | cut -d ":" -f1)
            tmux a -t "$first_session"
        fi
    else
        # Already in TMUX
        echo "Already in tmux, skipping..."
    fi
}


# ========================================================== ALIASES =====================================================================

# confiruration
alias bashconf="nvim \$HOME/.bashrc.user"
alias inputconf="nvim \$HOME/.inputrc"
alias tmuxconf="nvim \$HOME/.tmux.conf"
alias gitconf="nvim \$HOME/.gitconfig"
alias bashreload="source \$HOME/.bashrc.user"
alias tmuxview="bat \$HOME/.tmux.conf"
alias gitview="bat \$HOME/.gitconfig"
alias netrconf="nvim \$HOME/.netrc"

# working
alias ll="_my_ll_command"
alias l="_my_ll_command"
alias lt="_my_tree_command"
alias cls="clear"
alias nvimf="_call_tool_with_fzf_utility nvim"
alias vimf="_call_tool_with_fzf_utility vim"
alias batf="_call_tool_with_fzf_utility bat"
alias lessf="_call_tool_with_fzf_utility less"
alias catf="_call_tool_with_fzf_utility cat"
alias cdi="_cd_fzf_utility"
alias working="cd \$HOME/workspace"
alias gitroot='cd "$(git root)"'
alias dt='dt --side-by-side --diff-args=-U999'

# start tmux
alias tux="_start_tmux_utility"

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/virtualenv
# shellcheck source=/dev/null
source /usr/bin/virtualenvwrapper

